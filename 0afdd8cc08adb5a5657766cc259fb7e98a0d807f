{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "769e2c0f_9ccc135e",
        "filename": "subprojects/nlohmann_json.wrap",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-07T20:47:26Z",
      "side": 1,
      "message": "Shouldn\u0027t we just be using the wrapdb one here instead of inventing our own?",
      "revId": "0afdd8cc08adb5a5657766cc259fb7e98a0d807f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "97183bf4_f25da870",
        "filename": "subprojects/nlohmann_json.wrap",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-12-07T20:56:29Z",
      "side": 1,
      "message": "Why use one that needs manual updates all the time?  This isn\u0027t a repo that people generally want to build outside of openbmc.  HEAD is sufficient for developers to build this outside of OE.",
      "parentUuid": "769e2c0f_9ccc135e",
      "revId": "0afdd8cc08adb5a5657766cc259fb7e98a0d807f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0b00138_691421c5",
        "filename": "subprojects/nlohmann_json.wrap",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2023-12-07T21:15:42Z",
      "side": 1,
      "message": "the same reason we don\u0027t set autorev on yocto recipes.  You get a stable release that can be built at any time and doesn\u0027t break randomly because we pulled in a breaking change from a dependency.\n\nMy opinions here aren\u0027t strong, mostly because nlohmann seems to do a good job keeping old code building on new versions.  There are other dependencies (boost, libgpio) where I think the difference matters.\n\nWith that said, I do think this patch needs to switch to the nlohmann master branch.  The default branch is develop, which I don\u0027t think we want for subproject?  I\u0027m assuming HEAD will just give us the newest on the default branch?  Or is it smart enough to grab master without it being specified?",
      "parentUuid": "97183bf4_f25da870",
      "revId": "0afdd8cc08adb5a5657766cc259fb7e98a0d807f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7269d958_5d9d0e95",
        "filename": "subprojects/nlohmann_json.wrap",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-12-07T21:33:22Z",
      "side": 1,
      "message": "We don\u0027t actually use these for any kind of CI though.  They\u0027re an aid for developers.  By default meson only extracts the package the first time you build and if you don\u0027t know what you\u0027re doing you can end up with a year-old git-commit anyhow (even if the wrap file changes, meson doesn\u0027t re-fetch).  \n\nI don\u0027t think we need to make 30+ commits to update the version for a developer aid.  If we end up where a particular version of nlohmann-json breaks, developers can `git checkout \u003cgood commit\u003e` in their subprojects directory until we sort out what is going on.  \n\nTwo data points based on my ~2 years experience regularly leveraging subproject builds for development:\n    - Many maintainers don\u0027t even use it because I often find problems and have to fix them when making pervasive fixes (that touch their repositories).\n    - I\u0027ve used this exact wrap file (or nearly similar, but HEAD being the important part) for a long while without issue.  Only about 4 repositories in the whole org have been using a pinned wrap file as-is.\n    \n\u003e Or is it smart enough to grab master without it being specified?\n\nIt uses the default branch by default.  I don\u0027t see this as a serious constraint since we\u0027re not using this for CI (as described above).",
      "parentUuid": "b0b00138_691421c5",
      "revId": "0afdd8cc08adb5a5657766cc259fb7e98a0d807f",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}